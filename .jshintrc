{
  // JSHint Default Configuration File (as on JSHint website)
  // See http://jshint.com/docs/ for more details

  "maxerr"        : 50,       // {int} Maximum error before stopping

  // Enforcing
  "bitwise"       : true,     // true: Prohibit bitwise operators (&, |, ^, etc.)
  "camelcase"     : false,    // true: Identifiers must be in camelCase
  "curly"         : true,     // true: Require {} for every new block or scope
  "eqeqeq"        : true,     // true: Require triple equals (===) for comparison
  "es3"           : false,    // true: code needs to adhere to ECMAScript 3 specification
  "forin"         : true,     // true: Require filtering for..in loops with obj.hasOwnProperty()
  "freeze"        : true,     // true: prohibits overwriting prototypes of native objects such as Array, Date and so on.
  "immed"         : false,    // true: Require immediate invocations to be wrapped in parens e.g. `(function () { } ());`
  "indent"        : 2,        // {int} Number of spaces to use for indentation
  "latedef"       : true,     // true: Require variables/functions to be defined before being used; (DEFAULT:false)
  "newcap"        : false,    // true: Require capitalization of all constructor functions e.g. `new F()`
  "noarg"         : true,     // true: Prohibit use of `arguments.caller` and `arguments.callee`
  "noempty"       : false,    // true: Prohibit use of empty blocks; (DEFAULT:true)
  "nonbsp"        : false,    // true: warns about "non-breaking whitespace" characters
  "nonew"         : false,    // true: Prohibit use of constructors for side-effects (without assignment)
  "plusplus"      : false,    // true: Prohibit use of `++` & `--`
  "quotmark"      : false,    // Quotation mark consistency:
  //   false    : do nothing (default)
  //   true     : ensure whatever is used is consistent
  //   "single" : require single quotes
  //   "double" : require double quotes
  "undef"         : true,     // true: Require all non-global variables to be declared (prevents global leaks)
  "unused"        : false,    // true: Require all defined variables be used (DEFAULT:true)
  "strict"        : true,     // true: Requires all functions run in ES5 Strict Mode
  "maxparams"     : false,    // {int} Max number of formal params allowed per function
  "maxdepth"      : false,    // {int} Max depth of nested blocks (within functions)
  "maxstatements" : false,    // {int} Max number statements per function
  "maxcomplexity" : false,    // {int} Max cyclomatic complexity per function
  "maxlen"        : false,    // {int} Max number of characters per line

  // Relaxing
  "asi"           : false,     // true: Tolerate Automatic Semicolon Insertion (no semicolons)
  "boss"          : false,     // true: Tolerate assignments where comparisons would be expected
  "debug"         : false,     // true: Allow debugger statements e.g. browser breakpoints.
  "eqnull"        : false,     // true: Tolerate use of `== null`
  "esnext"        : false,     // true: Allow ES.next (ES6) syntax (ex: `const`)
  "evil"          : false,     // true: Tolerate use of `eval` and `new Function()`
  "expr"          : true,      // true: Tolerate `ExpressionStatement` as Programs  (had to switch to true for sinon chai statments...calledOnce)
  "funcscope"     : false,     // true: Tolerate defining variables inside control statements"
  "globalstrict"  : false,     // true: Allow global "use strict" (also enables 'strict')
  "iterator"      : false,     // true: Tolerate using the `__iterator__` property
  "lastsemic"     : false,     // true: Tolerate omitting a semicolon for the last statement of a 1-line block
  "laxbreak"      : false,     // true: Tolerate possibly unsafe line breakings
  "laxcomma"      : false,     // true: Tolerate comma-first style coding
  "loopfunc"      : true,      // true: Tolerate functions being defined in loops (DEFAULT:false)
  "maxerr"        : 50,        // {int} This options allows you to set the maximum amount of warnings JSHint will produce before giving up. Default is 50.
  "moz"           : false,     // true: This options tells JSHint that your code uses Mozilla JavaScript extensions.
  "multistr"      : false,     // true: Tolerate multi-line strings
  "notypeof"      : false,     // true: This option suppresses warnings about invalid typeof operator values.
  "proto"         : false,     // true: Tolerate using the `__proto__` property
  "scripturl"     : false,     // true: Tolerate script-targeted URLs
  "shadow"        : false,     // true: Allows re-define variables later in code e.g. `var x=1; x=2;`
  "sub"           : false,     // true: Tolerate using `[]` notation when it can still be expressed in dot notation
  "supernew"      : false,     // true: Tolerate `new function () { ... };` and `new Object;`
  "validthis"     : false,     // true: Tolerate using this in a non-constructor function
  "noyield"       : false,     // true: This option suppresses warnings about generator functions with no yield statement in them

  // Environments
  "browser"       : true,     // Web Browser (window, document, etc)
  "couch"         : false,    // CouchDB
  "devel"         : true,     // Development/debugging (alert, confirm, etc)
  "dojo"          : false,    // Dojo Toolkit
  "jquery"        : true,     // jQuery (DEFAULT:false)
  "mootools"      : false,    // MooTools
  "node"          : true,     // Node.js (DEFAULT:false)
  "nonstandard"   : false,    // Widely adopted globals (escape, unescape, etc)
  "phantom"       : false,    // This option defines globals available when your core is running inside of the PhantomJS runtime environment.
  "prototypejs"   : false,    // Prototype and Scriptaculous
  "rhino"         : false,    // Rhino
  "worker"        : false,    // Web Workers
  "wsh"           : false,    // Windows Scripting Host
  "yui"           : false,    // Yahoo User Interface

  // Legacy
  "nomen"         : false,    // true: Prohibit dangling `_` in variables
  "onevar"        : false,    // true: Allow only one `var` statement per function
  "passfail"      : false,    // true: Stop on first error
  "white"         : false,    // true: Check against strict whitespace and indentation rules

  // Custom Globals
  // additional predefined global variables
  // True means, code is allowed to overwrite this global variable.
  // False means, global is read only - should not be changed.
  //
  // You can also define these inline, ie, /* global MYVAR: false, MYOTHERVAR: false */

  "globals": {
    "angular": false,
    "inject": false,
    "describe": false,
    "it": false,
    "before": false,
    "beforeEach": false,
    "after": false,
    "afterEach": false,
    "expect": false
  }
}
